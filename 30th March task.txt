30Th March DSA Task

3. Given a binary tree, check if it is a complete binary tree or not

#include <stdio.h>

#include<stdlib.h>

#include<stdbool.h>


struct Node
{
 
   int data;

   struct Node* left;

   struct Node* right;

};
struct Node *newNode(char k)

{

    struct Node *node = (struct Node*)malloc(sizeof(struct Node));

    node->data = k;

    node->right = node->left = NULL;

    return node;

}
bool isFullTree(struct Node* root)
{

    if(root == NULL)

    return true;

    if(root->left == NULL && root->right == NULL)

    return true;

    if((root->left) && (root->right))

    return (isFullTree(root->left)&&isFullTree(root->right));

    return false;

}
int main()

{

     struct Node* root = NULL;

     root = newNode(10);

     root->left = newNode(20);
 
     root->right = newNode(30);

     root->left->right = newNode(40);

     root->left->left = newNode(50);

     root->right->left = newNode(60);
 
     root->right->right = newNode(70);

     root->left->left->left = newNode(80);
 
     root->left->left->right = newNode(100);

     root->left->right->left = newNode(70);
 
     root->left->right->right = newNode(74);
 
     root->right->left->left = newNode(89);

     root->right->left->right = newNode(90);
 
     root->right->right->left = newNode(62);
 
     root->right->right->right = newNode(95);

   if (isFullTree(root))

        printf("The Binary Tree is full\n");
   else
 
       printf("The Binary Tree is not full\n");

   return(0);

}

The Output is: The Binary Tree is full.


1. Given a perfect binary tree, print the values of alternating left and right nodes
   for each level in a top-down and bottom-up manner.

#include <iostream>
#include <queue>
using namespace std;

struct Node
{
	int data;
	Node *left, *right;

	Node(int data)
	{
		this->data = data;
		this->left = this->right = nullptr;
	}
};

void printNodes(Node* root)
{
	if (root == nullptr) {
		return;
	}

	cout << root->data << " ";

	queue<Node*> q1, q2;

	if (root->left && root->right)
	{
		q1.push(root->left);
		q2.push(root->right);
	}

	while (!q1.empty())
	{
		int n = q1.size();

		while (n--)
		{
			Node* x = q1.front();
			q1.pop();

			cout << x->data << " ";

			// enqueue left and right child of `x` to the first queue
			if (x->left) {
				q1.push(x->left);
			}

			if (x->right) {
				q1.push(x->right);
			}

			// dequeue front node from the second queue and print it
			Node* y = q2.front();
			q2.pop();

			cout << y->data << " ";

			// enqueue right and left child of `y` to the second queue
			if (y->right) {
				q2.push(y->right);
			}

			if (y->left) {
				q2.push(y->left);
			}
		}
	}
}

int main()
{
	Node* root = new Node(1);
	root->left = new Node(2);
	root->right = new Node(3);
	root->left->left = new Node(8);
	root->left->right = new Node(6);
	root->right->left = new Node(5);
	root->right->right = new Node(4);
	root->left->left->left = new Node(10);
	root->left->left->right = new Node(3);
	root->left->right->left = new Node(8);
	root->left->right->right = new Node(2);
	root->right->left->left = new Node(9);
	root->right->left->right = new Node(14);
	root->right->right->left = new Node(12);
	root->right->right->right = new Node(10);

	printNodes(root);

	return 0;
}

2. Given a binary tree and a node in it, write an efficient algorithm to find its next
   node at the same level as the node.

   #include <iostream>
#include <list>
using namespace std;
 
struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
 
Node* findRightNode(Node* root, Node* node)
{
    // return null if a tree is empty
    if (root == nullptr) {
        return nullptr;
    }
 
    list<Node*> queue;
    queue.push_back(root);
 
    Node* front = nullptr;
  
    while (!queue.empty())
    {
   
        int size = queue.size();
 
        while (size--)
        {
            front = queue.front();
            queue.pop_front();
 
            if (front == node)
            {
              
                if (size == 0) {
                    return nullptr;
                }
 
                return queue.front();
            }
 
            if (front->left) {
                queue.push_back(front->left);
            }
 
            if (front->right) {
                queue.push_back(front->right);
            }
        }
    }
 
    return nullptr;
}
 
int main()
{

    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->left->left = new Node(7);
    root->right->left->right = new Node(8);
 
    Node* right = findRightNode(root, root->left->right);
 
    if (right) {
        cout << "Right node is " << right->data;
    }
    else {
        cout << "Right node doesn't exist";
    }
 
    return 0;
}

OUTPUT:-
Right node is 6